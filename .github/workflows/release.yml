name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog for releases
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
            CHANGELOG="Updates since ${PREV_TAG}"
          else
            CHANGELOG="Initial release of peter-hook - A hierarchical git hooks manager for monorepos"
          fi
          
          echo "changelog=${CHANGELOG}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-release:
    name: Build Release Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: darwin-amd64
          - target: aarch64-apple-darwin
            os: macos-14
            name: darwin-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-amd64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare release assets (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz peter-hook
          sha256sum peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz > peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256

      - name: Prepare release assets (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip peter-hook.exe
          certutil -hashfile peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip SHA256 > peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip.sha256

      - name: Upload release archive (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz
          asset_name: peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload release checksum (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256
          asset_name: peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256
          asset_content_type: text/plain

      - name: Upload release archive (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip
          asset_name: peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip
          asset_content_type: application/zip

      - name: Upload release checksum (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip.sha256
          asset_name: peter-hook-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip.sha256
          asset_content_type: text/plain

  update-install-script:
    name: Update Installation Script
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update install.sh version
        run: |
          sed -i "s/VERSION=\".*\"/VERSION=\"${{ needs.create-release.outputs.version }}\"/" install.sh
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add install.sh
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update install script to ${{ needs.create-release.outputs.version }}"
            git push origin HEAD:main
          fi

  # Note: crates.io publishing disabled for internal project
  # publish-crate:
  #   name: Publish to crates.io
  #   needs: [create-release, build-release]  
  #   runs-on: ubuntu-latest
  #   if: ${{ !contains(needs.create-release.outputs.version, '-') }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Publish to crates.io
  #       run: cargo publish --token ${{ secrets.CARGO_TOKEN }}